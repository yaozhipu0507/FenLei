package example.com.fenlei.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import example.com.fenlei.utils.SecondProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SECOND_PRODUCT".
*/
public class SecondProductDao extends AbstractDao<SecondProduct, Long> {

    public static final String TABLENAME = "SECOND_PRODUCT";

    /**
     * Properties of entity SecondProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Icon = new Property(0, String.class, "icon", false, "ICON");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Pcid = new Property(2, int.class, "pcid", false, "PCID");
        public final static Property Pscid = new Property(3, Long.class, "pscid", true, "_id");
    }


    public SecondProductDao(DaoConfig config) {
        super(config);
    }
    
    public SecondProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SECOND_PRODUCT\" (" + //
                "\"ICON\" TEXT," + // 0: icon
                "\"NAME\" TEXT," + // 1: name
                "\"PCID\" INTEGER NOT NULL ," + // 2: pcid
                "\"_id\" INTEGER PRIMARY KEY );"); // 3: pscid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SECOND_PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SecondProduct entity) {
        stmt.clearBindings();
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(1, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPcid());
 
        Long pscid = entity.getPscid();
        if (pscid != null) {
            stmt.bindLong(4, pscid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SecondProduct entity) {
        stmt.clearBindings();
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(1, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPcid());
 
        Long pscid = entity.getPscid();
        if (pscid != null) {
            stmt.bindLong(4, pscid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public SecondProduct readEntity(Cursor cursor, int offset) {
        SecondProduct entity = new SecondProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // icon
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // pcid
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // pscid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SecondProduct entity, int offset) {
        entity.setIcon(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPcid(cursor.getInt(offset + 2));
        entity.setPscid(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SecondProduct entity, long rowId) {
        entity.setPscid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SecondProduct entity) {
        if(entity != null) {
            return entity.getPscid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SecondProduct entity) {
        return entity.getPscid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
